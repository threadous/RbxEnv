"use strict";(self.webpackChunkrbx_env=self.webpackChunkrbx_env||[]).push([[247],{6894:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var r=t(4848),o=t(8453);const c={sidebar_position:4},s="Executor Mechanics",a={id:"executor-mechanics",title:"Executor Mechanics",description:"What are Executors?",source:"@site/docs/executor-mechanics.md",sourceDirName:".",slug:"/executor-mechanics",permalink:"/docs/executor-mechanics",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Network Mechanics",permalink:"/docs/network-mechanics"},next:{title:"Help & Info",permalink:"/docs/help-and-support"}},i={},l=[{value:"What are Executors?",id:"what-are-executors",level:2},{value:"Why use Executors?",id:"why-use-executors",level:2},{value:"Creating An Executor",id:"creating-an-executor",level:2},{value:"Utilizing an Executor",id:"utilizing-an-executor",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"executor-mechanics",children:"Executor Mechanics"})}),"\n",(0,r.jsx)(n.h2,{id:"what-are-executors",children:"What are Executors?"}),"\n",(0,r.jsxs)(n.p,{children:["Executors act like ",(0,r.jsx)(n.code,{children:"BindableEvents"})," (server-server communication). Unlike a ",(0,r.jsx)(n.code,{children:"Network"}),", an ",(0,r.jsx)(n.code,{children:"Executor"})," does not contain a literal ",(0,r.jsx)(n.code,{children:"BindableEvent"}),". Executors are not environment restricted variables (like Networks); they can be accessed through any environment (explained more later on this page - executor utilization)"]}),"\n",(0,r.jsx)(n.h2,{id:"why-use-executors",children:"Why use Executors?"}),"\n",(0,r.jsxs)(n.p,{children:["Similar to a ",(0,r.jsx)(n.code,{children:"Network"}),", an executor saves developers the trouble of manually creating bindable events and defining them. Executors were built compatible to RbxEnv to provide a smoother workflow."]}),"\n",(0,r.jsx)(n.h2,{id:"creating-an-executor",children:"Creating An Executor"}),"\n",(0,r.jsxs)(n.p,{children:["Unlike a ",(0,r.jsx)(n.code,{children:"Network"})," or a ",(0,r.jsx)(n.code,{children:"GameConstant"}),", an ",(0,r.jsx)(n.code,{children:"Executor"})," is either ",(0,r.jsx)(n.strong,{children:"server only"})," or ",(0,r.jsx)(n.strong,{children:"client only"})," as they are used for communication between server-to-server or client-to-client, which implies that executors need not be replicated so they need not be defined in the ",(0,r.jsx)(n.code,{children:"GameConfig"})," module."]}),"\n",(0,r.jsxs)(n.p,{children:["The following code creates an executor of the name ",(0,r.jsx)(n.em,{children:"StatCounter"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'RbxEnv:AddExecutors("StatCounter")\n\nlocal statCounter = RbxEnv:GetExecutor("StatCounter")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Instead of adding only 1, you can chose to initialize multiple executors at once:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'RbxEnv:AddExecutors("StatCounter", "GameCounter", "PlayerData")\n'})}),"\n",(0,r.jsx)(n.p,{children:"To get an executor from another script:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local statCounter = RbxEnv:GetExecutor("StatCounter")\nlocal gameCounter = RbxEnv:GetExecutor("GameCounter")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Keep in mind that though you won't have to wait for an environment to be initialized to create/fetch executors, you must still wait to check if the executor itself has been initialized"})}),"\n",(0,r.jsx)(n.h2,{id:"utilizing-an-executor",children:"Utilizing an Executor"}),"\n",(0,r.jsxs)(n.p,{children:["Similar to a ",(0,r.jsx)(n.code,{children:"Network"}),", you must first write bootstrapping code for your ",(0,r.jsx)(n.code,{children:"Executor"})," before firing it."]}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"CatchJob"})," method to connect the executor to your own function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local statCounter = RbxEnv:GetExecutor("StatCounter")\n\nstatCounter:CatchJob(function(someVariablePassed)\n    print(someVariablePassed)\nend)\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"someVariablePassed"})," is the variable being passed through the ",(0,r.jsx)(n.code,{children:"statCounter"})," executor in this case."]}),"\n",(0,r.jsxs)(n.p,{children:["The following code shows how you would fire an executor (",(0,r.jsx)(n.strong,{children:"NOTE: Bootstrapping code must already have been written and compiled to run prior to firing an executor"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'RbxEnv:TagJob("StatCounter", "The variable I Passed!")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The code above fires the ",(0,r.jsx)(n.code,{children:"Executor"})," called ",(0,r.jsx)(n.code,{children:"StatCounter"})," and passes the string ",(0,r.jsx)(n.code,{children:'"The variable I Passed"'})," as an argument."]}),"\n",(0,r.jsx)(n.p,{children:"You can add as many variables to pass through the Executor as you wish:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'RbxEnv:TagJob("StatCounter", num1, num2, num3, num4)\n'})}),"\n",(0,r.jsx)(n.p,{children:"And you can include this in your bootstrapping code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"statCounter:CatchJob(function(num1, num2, num3, num4)\n    print(num1 + num2 + num3 + num4)\nend)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const o={},c=r.createContext(o);function s(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);