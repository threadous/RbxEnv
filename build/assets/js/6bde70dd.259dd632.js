"use strict";(self.webpackChunkrbx_env=self.webpackChunkrbx_env||[]).push([[195],{6900:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=a(4848),i=a(8453);const r={sidebar_position:2},s="Environment Mechanics",c={id:"env-mechanics",title:"Environment Mechanics",description:"The Basics",source:"@site/docs/env-mechanics.md",sourceDirName:".",slug:"/env-mechanics",permalink:"/docs/env-mechanics",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"About RbxEnv",permalink:"/docs/intro"},next:{title:"Network Mechanics",permalink:"/docs/network-mechanics"}},o={},l=[{value:"The Basics",id:"the-basics",level:2},{value:"Variable Mechanics",id:"variable-mechanics",level:2},{value:"Getting a variable value",id:"getting-a-variable-value",level:2},{value:"Fetching a variable",id:"fetching-a-variable",level:2},{value:"Loading an Environment",id:"loading-an-environment",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"environment-mechanics",children:"Environment Mechanics"})}),"\n",(0,t.jsx)(n.h2,{id:"the-basics",children:"The Basics"}),"\n",(0,t.jsxs)(n.p,{children:["Let's start by creating a variable that would be shared by both the server and the client through the ",(0,t.jsx)(n.code,{children:"GameConfig"})," module."]}),"\n",(0,t.jsxs)(n.p,{children:["To add a constant ",(0,t.jsx)(n.code,{children:"Gravity"})," to the environment ",(0,t.jsx)(n.code,{children:"EnvironmentBasics"})," we can do:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'["GameConstants"] = {\n    ["EnvironmentBasics"] = {\n        Gravity = 9.8,\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Doing this creates a variable in the ",(0,t.jsx)(n.code,{children:"EnvironmentBasics"})," that will be carried over to the client. Changing this variable via a script will not replicate across the game. Once initialized, this value will stay be initialized to both the client and the server. In order to change this, you must add a method so that when the server changes this value, the client also does so."]}),"\n",(0,t.jsx)(n.h2,{id:"variable-mechanics",children:"Variable Mechanics"}),"\n",(0,t.jsxs)(n.p,{children:["The previous code was aimed at creating variables shared across both the client and the server. Variables would only replicate if declared in the ",(0,t.jsx)(n.code,{children:"GameConfig"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["But in cases where you wouldn't want variables replicated and want to create variables ",(0,t.jsx)(n.strong,{children:"AFTER"})," initializing the environment, you could create a variable directly:"]}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a new environment called ",(0,t.jsx)(n.code,{children:"coreEnvironment"})," and initialize a few variables in it."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"IMPORTANT"}),"\n",(0,t.jsx)(n.strong,{children:"Make sure that your code yields for RbxEnv to first initialize then create any non-replicating environments"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Package = ReplicatedStorage:WaitForChild(\'RbxEnv\')\n\nlocal RbxEnv = require(Package.Env)\n\n-- // Creating a new environment\n-- // Perhaps add a wait for 2 seconds before declaring the variable so the environment is not initialized along with RbxEnv\n\ntask.wait(2)\nlocal coreEnvironment = RbxEnv.new("coreEnvironment")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now that we have our code set-up, we can create a variable. For the example, it will be called ",(0,t.jsx)(n.code,{children:"GameData"})]}),"\n",(0,t.jsxs)(n.p,{children:["The following code block initialized and declares a variable called ",(0,t.jsx)(n.code,{children:"GameData"})," in the ",(0,t.jsx)(n.code,{children:"coreEnvironment"})," and sets the value of the variable to ",(0,t.jsx)(n.code,{children:'"Very Important Data"'}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'--// Creating a variable\n\ncoreEnvironment:Variable("GameData").set("Very Important Global Data")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getting-a-variable-value",children:"Getting a variable value"}),"\n",(0,t.jsx)(n.p,{children:"To reference the same variable value in the same script, you would do:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'coreEnvironment:fetch("GameData") -- // Returns the value "Very Important Global Data"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"fetching-a-variable",children:"Fetching a variable"}),"\n",(0,t.jsxs)(n.p,{children:["To re-assign a value or change the value of a variable, you would use the ",(0,t.jsx)(n.code,{children:"Get"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'coreEnvironment:Get("GameData").set("Not so important anymore")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Get"})," method returns the ",(0,t.jsx)(n.code,{children:"variable"})," structure which has the ",(0,t.jsx)(n.code,{children:"set"})," method that allows you to set its value."]}),"\n",(0,t.jsx)(n.h2,{id:"loading-an-environment",children:"Loading an Environment"}),"\n",(0,t.jsxs)(n.p,{children:["Accessing an environment is relatively simple. ",(0,t.jsx)(n.strong,{children:"You must always wait before getting the environment or check to make sure if the environment you are trying to access has already been defined"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In some cases, you might be declaring all your environments at the start of the script but add a ",(0,t.jsx)(n.code,{children:"task.wait(1)"})," to make sure that any other scripts that are creating the environment have ran first."]}),"\n",(0,t.jsxs)(n.p,{children:["Now that we have ",(0,t.jsx)(n.code,{children:"coreEnvironment"})," initialized, create a new script so we can access this environment:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Package = ReplicatedStorage:WaitForChild(\'RbxEnv\')\n\nlocal RbxEnv = require(Package.Env)\n\ntask.wait(1)\nlocal coreEnvironment = RbxEnv.GetEnvironment("coreEnvironment") -- Get the coreEnvironment (environment class)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["After defining ",(0,t.jsx)(n.code,{children:"coreEnvironment"})," you can modify/change this environment as you would and fetch any of its variables."]}),"\n",(0,t.jsxs)(n.p,{children:["Environments go great with ",(0,t.jsx)(n.code,{children:"Networks"}),"; the next page will talk about how ",(0,t.jsx)(n.code,{children:"RemoteEvents"})," and ",(0,t.jsx)(n.code,{children:"BindableEvents"})," are embedded into ",(0,t.jsx)(n.code,{children:"Environments"})," through a ",(0,t.jsx)(n.code,{children:"Network"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);